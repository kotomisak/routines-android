apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics' //FIXME extract firebase dependency to analytics module if possible somehow

android {
	signingConfigs {
		release {
			// passwords and alias are obtained via askForPasswords task
			storeFile file("../${project.property('release.keystore.file')}")
			storePassword "releaseUnitinitializedStorePassword"
			keyAlias "releaseUnitializedKeyAlias"
			keyPassword "releaseUninitializedKeyPassword"
		}
		debug {
			// passwords and alias are obtained via askForPasswords task
			storeFile file("../${project.property('debug.keystore.file')}")
			storePassword "debugUnitinitializedStorePassword"
			keyAlias "debugUnitializedKeyAlias"
			keyPassword "debugUninitializedKeyPassword"
		}
	}
}

task askForPasswords {

	def storePass
	def keyAlias
	def keyPass

	def isDebugTask = getGradle().getStartParameter().getTaskNames().any {name -> name.toLowerCase().contains("debug")}

	def keystorePropertiesFile

	if (isDebugTask && project.hasProperty("debug.keystore.properties")) {
		if (!project.hasProperty("debug.keystore.properties")) {
			throw IllegalStateException("Missing definition for debug.keystore.properties in gradle.properites!")
		} else {
			println "debug.keystore.properties value = ${project.property("debug.keystore.properties")}"
		}
		keystorePropertiesFile = new File((String) project.property("debug.keystore.properties"))
	} else {
		if (!project.hasProperty("release.keystore.properties")) {
			throw IllegalStateException("Missing definition for release.keystore.properties in gradle.properites!")
		} else {
			println "release.keystore.properties value = ${project.property("release.keystore.properties")}"
		}
		keystorePropertiesFile = new File((String) project.property("release.keystore.properties"))
	}

	if (keystorePropertiesFile.exists()) {
		println "Loading keystore passwords from property file..."
		Properties properties = new Properties()
		properties.load(new FileInputStream(keystorePropertiesFile))
		storePass = properties['keystore.store.password']
		println("storePass[$storePass]")
		keyAlias = properties['keystore.key.alias']
		println("keyAlias[$keyAlias]")
		keyPass = properties['keystore.key.password']
		println("keyPass[$keyPass] isEmpty=${keyPass.isEmpty()}")
	} else {
		throw IllegalStateException("Missing *.keystore.properties ${keystorePropertiesFile} file for isDebugTask=${isDebugTask}")
	}

	if (isDebugTask) {
		android.signingConfigs.debug.storePassword = storePass
		android.signingConfigs.debug.keyAlias = keyAlias
		android.signingConfigs.debug.keyPassword = keyPass
	} else {
		android.signingConfigs.release.storePassword = storePass
		android.signingConfigs.release.keyAlias = keyAlias
		android.signingConfigs.release.keyPassword = keyPass
	}
}


tasks.whenTaskAdded {
	theTask ->
		theTask.dependsOn "askForPasswords"
}