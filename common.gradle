allprojects {
	apply plugin: 'kotlin-android'
	apply plugin: 'kotlin-kapt'
	apply plugin: 'kotlin-android-extensions'
	apply plugin: 'androidx.navigation.safeargs.kotlin'

	kapt {
		useBuildCache = true
		correctErrorTypes = true
		// avoid unknown type replacing with NonExistentClass
	}

	androidExtensions {
		experimental = true
	}

	android {
		compileOptions {
			sourceCompatibility JavaVersion.VERSION_1_8
			targetCompatibility JavaVersion.VERSION_1_8
		}

		kotlinOptions {
			jvmTarget = JavaVersion.VERSION_1_8
			freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
		}

		compileSdkVersion versions.sdk
		dataBinding.enabled true

		defaultConfig {
			minSdkVersion versions.min_sdk
			targetSdkVersion versions.sdk
			testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
			vectorDrawables.useSupportLibrary = true
			manifestPlaceholders += [screenOrientation: "portrait"]
		}

		flavorDimensions "env"

		productFlavors {

			mock {
				dimension = "env"
			}

			dev {
				dimension = "env"
			}

			production {
				dimension = "env"
			}
		}

		sourceSets {
			main.java.srcDirs += 'src/main/kotlin'
			test.java.srcDirs += 'src/test/kotlin'
			androidTest.java.srcDirs += 'src/androidTest/kotlin'
		}

		buildTypes {
			debug {
				zipAlignEnabled false
				minifyEnabled false
			}

			release {
				zipAlignEnabled true
				minifyEnabled true

				proguardFile '../proguard-rules/proguard-awsappsync.pro'
				proguardFile '../proguard-rules/proguard-glide.pro'
				proguardFile '../proguard-rules/proguard-square-okhttp3.pro'
				proguardFile '../proguard-rules/proguard-square-okio.pro'
				proguardFile '../proguard-rules/proguard-square-retrofit2.pro'
				proguardFile '../proguard-rules/proguard-crashlytics.pro'
				proguardFile "../proguard-rules/proguard-realm.pro"
				proguardFile "../proguard-rules/proguard-slf4j.pro"
				proguardFile "../proguard-rules/proguard-jbox2d.pro"
				proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			}
		}

		testOptions {
			unitTests.returnDefaultValues = true

			unitTests.all {
				testLogging {
					events "passed", "skipped", "failed", "standardOut", "standardError"
					outputs.upToDateWhen {
						false
					}
					showStandardStreams = true
				}
				maxParallelForks = 8
			}
		}

		lintOptions {
			abortOnError false
		}
	}

	/**
	 * Every subproject will have these dependencies
	 * [all kapts] 	- because it's generating per module :(
	 * [tests] 		- becasuse dependencies in tests don't work :(
	 */
	dependencies {

		// Common Dagger (minimal dagger dependency to generate classes across all modules)
		kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

//		compileOnly 'com.squareup.inject:assisted-inject-annotations-dagger2:0.5.2'
//		kapt 'com.squareup.inject:assisted-inject-processor-dagger2:0.5.2'
		//Temporarily workaround because of: https://github.com/square/AssistedInject/issues/81
		compileOnly 'com.github.davidliu.AssistedInject:assisted-inject-annotations-dagger2:268bff6'
		kapt 'com.github.davidliu.AssistedInject:assisted-inject-processor-dagger2:268bff6'

		//Moshi (minimal moshi dependency to generate classes across all modules)
		kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"
		implementation "com.squareup.moshi:moshi-kotlin:${versions.moshi}"

		/* TEST DEPENDENCIES BASICS FOR EVERY MODULE - for ability to test modules with lower dependency than module-test-utils */
		//Common unit test
		testImplementation "org.junit.jupiter:junit-jupiter:${versions.junit5}"
		testImplementation "org.mockito:mockito-core:${versions.mockito}"

		//Common UI test
		androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"

	}
}

